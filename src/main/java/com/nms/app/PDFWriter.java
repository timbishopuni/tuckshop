package com.nms.app;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * PDF Writer alternative using iText Will most likely implement instead of
 * PDFBox Sample code taken for learning purposes from
 * http://www.vogella.com/tutorials/JavaPDF/article.html
 * 
 * @author Tim Bishop
 *
 */
public class PDFWriter {
	private static String FILE = "./target/FirstPdf.pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	// Add meta data to the PDF document
	private static void addMetaData(Document document) {
		document.addTitle("NMS Tuckshop Labels");
		document.addSubject("Labels");
		document.addKeywords("Labels, Tuckshop, NMS");
		document.addAuthor("Tim Bishop");
		document.addCreator("Tim Bishop");
	}

	private static void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Title of the document", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph("This document describes something which is very important ", smallBold));

		addEmptyLine(preface, 8);

		preface.add(new Paragraph(
				"This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
				redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addContent(Document document) throws DocumentException {
		Anchor anchor = new Anchor();

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Section subCatPart = catPart.addSection(new Paragraph("", catFont));



		// add a list

		// add a table
		createTable(subCatPart);

		// now add all this to the document
		document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter", catFont);
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);


		// now add all this to the document
		document.add(catPart);

	}
	public static void addTickets(Document ticketDocument, int numTickets){
		PdfPTable table = new PdfPTable(3);
		

		for(int i = 0; i< numTickets; i++){
			PdfPCell cell = new PdfPCell();
			cell.setMinimumHeight((float) 20.0);
			cell.setFixedHeight((float)20.0);
			Phrase text = new Phrase ("This is 			some ticket data");
			cell.setPhrase(text);
			cell.setNoWrap(false);
			table.addCell(cell);
		}
		try {
			ticketDocument.add(table);
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	public static void createTable(Section subCatPart) throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

//		PdfPCell c1 = new PdfPCell(new Phrase("Tickets"));
//		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
//		table.addCell(c1);
//
//		c1 = new PdfPCell(new Phrase("Table Header 2"));
//		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
//		table.addCell(c1);
//
//		c1 = new PdfPCell(new Phrase("Table Header 3"));
//		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
//		table.addCell(c1);
//		table.setHeaderRows(1);

		table.addCell("1.0                       someting                      ++something");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("1.3");
		table.addCell("2.2");
		table.addCell("2.3");

		subCatPart.add(table);

	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	public static void main(String[] args) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			//addTitlePage(document);
			addTickets(document, 20);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
